{"abi":[{"type":"function","name":"msgSender","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"msgSender()":"d737d0c7"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"msgSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"msgSender()\":{\"details\":\"Uniswap v4 periphery contracts implement a callback pattern which lose the original msg.sender caller context. This view function provides a way for integrating contracts (e.g. hooks) to access the original caller address.\",\"returns\":{\"_0\":\"The address of the original caller\"}}},\"title\":\"IMsgSender\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"msgSender()\":{\"notice\":\"Returns the address of the original caller (msg.sender)\"}},\"notice\":\"Interface for contracts that expose the original caller\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/uniswap-hooks/lib/v4-periphery/src/interfaces/IMsgSender.sol\":\"IMsgSender\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@ensdomains/=lib/uniswap-hooks/lib/v4-core/node_modules/@ensdomains/\",\":@openzeppelin/contracts/=lib/uniswap-hooks/lib/v4-core/lib/openzeppelin-contracts/contracts/\",\":@openzeppelin/uniswap-hooks/=lib/uniswap-hooks/\",\":@uniswap/v4-core/=lib/uniswap-hooks/lib/v4-core/\",\":@uniswap/v4-periphery/=lib/uniswap-hooks/lib/v4-periphery/\",\":ds-test/=lib/the-compact/lib/permit2/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/uniswap-hooks/lib/v4-core/lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/the-compact/lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=lib/uniswap-hooks/lib/v4-core/node_modules/hardhat/\",\":hookmate/=lib/hookmate/\",\":openzeppelin-contracts/=lib/the-compact/lib/permit2/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/uniswap-hooks/lib/v4-core/lib/openzeppelin-contracts/contracts/\",\":permit2/=lib/uniswap-hooks/lib/v4-periphery/lib/permit2/\",\":solady/=lib/the-compact/lib/solady/src/\",\":soledge/=lib/the-compact/lib/soledge/src/\",\":solmate/=lib/uniswap-hooks/lib/v4-core/lib/solmate/\",\":the-compact/=lib/the-compact/\",\":uniswap-hooks/=lib/uniswap-hooks/src/\",\":v4-core/=lib/uniswap-hooks/lib/v4-core/\",\":v4-periphery/=lib/uniswap-hooks/lib/v4-periphery/\"]},\"sources\":{\"lib/uniswap-hooks/lib/v4-periphery/src/interfaces/IMsgSender.sol\":{\"keccak256\":\"0xcc7d4e3f2fde34cf1ad9f05a8e43977e04d19624f71eb8a8c295feaf64b362a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1e02044b5e19cc9ca24d23f55667142fde6daefba66408b56c4f620b625fc189\",\"dweb:/ipfs/QmUqWdRBqWi2tZkNAPhzLZbknP26TZbD8iRQMd3fdZGFgi\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.30+commit.73712a01"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"view","type":"function","name":"msgSender","outputs":[{"internalType":"address","name":"","type":"address"}]}],"devdoc":{"kind":"dev","methods":{"msgSender()":{"details":"Uniswap v4 periphery contracts implement a callback pattern which lose the original msg.sender caller context. This view function provides a way for integrating contracts (e.g. hooks) to access the original caller address.","returns":{"_0":"The address of the original caller"}}},"version":1},"userdoc":{"kind":"user","methods":{"msgSender()":{"notice":"Returns the address of the original caller (msg.sender)"}},"version":1}},"settings":{"remappings":["@ensdomains/=lib/uniswap-hooks/lib/v4-core/node_modules/@ensdomains/","@openzeppelin/contracts/=lib/uniswap-hooks/lib/v4-core/lib/openzeppelin-contracts/contracts/","@openzeppelin/uniswap-hooks/=lib/uniswap-hooks/","@uniswap/v4-core/=lib/uniswap-hooks/lib/v4-core/","@uniswap/v4-periphery/=lib/uniswap-hooks/lib/v4-periphery/","ds-test/=lib/the-compact/lib/permit2/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/uniswap-hooks/lib/v4-core/lib/openzeppelin-contracts/lib/erc4626-tests/","forge-gas-snapshot/=lib/the-compact/lib/permit2/lib/forge-gas-snapshot/src/","forge-std/=lib/forge-std/src/","hardhat/=lib/uniswap-hooks/lib/v4-core/node_modules/hardhat/","hookmate/=lib/hookmate/","openzeppelin-contracts/=lib/the-compact/lib/permit2/lib/openzeppelin-contracts/","openzeppelin/=lib/uniswap-hooks/lib/v4-core/lib/openzeppelin-contracts/contracts/","permit2/=lib/uniswap-hooks/lib/v4-periphery/lib/permit2/","solady/=lib/the-compact/lib/solady/src/","soledge/=lib/the-compact/lib/soledge/src/","solmate/=lib/uniswap-hooks/lib/v4-core/lib/solmate/","the-compact/=lib/the-compact/","uniswap-hooks/=lib/uniswap-hooks/src/","v4-core/=lib/uniswap-hooks/lib/v4-core/","v4-periphery/=lib/uniswap-hooks/lib/v4-periphery/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/uniswap-hooks/lib/v4-periphery/src/interfaces/IMsgSender.sol":"IMsgSender"},"evmVersion":"cancun","libraries":{}},"sources":{"lib/uniswap-hooks/lib/v4-periphery/src/interfaces/IMsgSender.sol":{"keccak256":"0xcc7d4e3f2fde34cf1ad9f05a8e43977e04d19624f71eb8a8c295feaf64b362a3","urls":["bzz-raw://1e02044b5e19cc9ca24d23f55667142fde6daefba66408b56c4f620b625fc189","dweb:/ipfs/QmUqWdRBqWi2tZkNAPhzLZbknP26TZbD8iRQMd3fdZGFgi"],"license":"MIT"}},"version":1},"id":94}