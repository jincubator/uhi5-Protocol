{"abi":[{"type":"function","name":"multicall","inputs":[{"name":"data","type":"bytes[]","internalType":"bytes[]"}],"outputs":[{"name":"results","type":"bytes[]","internalType":"bytes[]"}],"stateMutability":"payable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"multicall(bytes[])":"ac9650d8"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"multicall(bytes[])\":{\"details\":\"The `msg.value` is passed onto all subcalls, even if a previous subcall has consumed the ether. Subcalls can instead use `address(this).value` to see the available ETH, and consume it using {value: x}.\",\"params\":{\"data\":\"The encoded function data for each of the calls to make to this contract\"},\"returns\":{\"results\":\"The results from each of the calls passed in via data\"}}},\"title\":\"IMulticall_v4\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"multicall(bytes[])\":{\"notice\":\"Call multiple functions in the current contract and return the data from all of them if they all succeed\"}},\"notice\":\"Interface for the Multicall_v4 contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/uniswap-hooks/lib/v4-periphery/src/interfaces/IMulticall_v4.sol\":\"IMulticall_v4\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@ensdomains/=lib/uniswap-hooks/lib/v4-core/node_modules/@ensdomains/\",\":@openzeppelin/contracts/=lib/uniswap-hooks/lib/v4-core/lib/openzeppelin-contracts/contracts/\",\":@openzeppelin/uniswap-hooks/=lib/uniswap-hooks/\",\":@uniswap/v4-core/=lib/uniswap-hooks/lib/v4-core/\",\":@uniswap/v4-periphery/=lib/uniswap-hooks/lib/v4-periphery/\",\":ds-test/=lib/the-compact/lib/permit2/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/uniswap-hooks/lib/v4-core/lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/the-compact/lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=lib/uniswap-hooks/lib/v4-core/node_modules/hardhat/\",\":hookmate/=lib/hookmate/\",\":openzeppelin-contracts/=lib/the-compact/lib/permit2/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/uniswap-hooks/lib/v4-core/lib/openzeppelin-contracts/contracts/\",\":permit2/=lib/uniswap-hooks/lib/v4-periphery/lib/permit2/\",\":solady/=lib/the-compact/lib/solady/src/\",\":soledge/=lib/the-compact/lib/soledge/src/\",\":solmate/=lib/uniswap-hooks/lib/v4-core/lib/solmate/\",\":the-compact/=lib/the-compact/\",\":uniswap-hooks/=lib/uniswap-hooks/src/\",\":v4-core/=lib/uniswap-hooks/lib/v4-core/\",\":v4-periphery/=lib/uniswap-hooks/lib/v4-periphery/\"]},\"sources\":{\"lib/uniswap-hooks/lib/v4-periphery/src/interfaces/IMulticall_v4.sol\":{\"keccak256\":\"0x336bec303f7ff86497d2679464c5adad5040f412b3d0769ce5e1d2a42f7e2c08\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7734f047d98d331c8abc51ad9f358ceee0a6dcae8d89ac49084b84de0d2d42e7\",\"dweb:/ipfs/QmWij2h7mU36LsXhb9P6pkYXrSCua4ixeWaVFSrsEcEmPQ\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.30+commit.73712a01"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"stateMutability":"payable","type":"function","name":"multicall","outputs":[{"internalType":"bytes[]","name":"results","type":"bytes[]"}]}],"devdoc":{"kind":"dev","methods":{"multicall(bytes[])":{"details":"The `msg.value` is passed onto all subcalls, even if a previous subcall has consumed the ether. Subcalls can instead use `address(this).value` to see the available ETH, and consume it using {value: x}.","params":{"data":"The encoded function data for each of the calls to make to this contract"},"returns":{"results":"The results from each of the calls passed in via data"}}},"version":1},"userdoc":{"kind":"user","methods":{"multicall(bytes[])":{"notice":"Call multiple functions in the current contract and return the data from all of them if they all succeed"}},"version":1}},"settings":{"remappings":["@ensdomains/=lib/uniswap-hooks/lib/v4-core/node_modules/@ensdomains/","@openzeppelin/contracts/=lib/uniswap-hooks/lib/v4-core/lib/openzeppelin-contracts/contracts/","@openzeppelin/uniswap-hooks/=lib/uniswap-hooks/","@uniswap/v4-core/=lib/uniswap-hooks/lib/v4-core/","@uniswap/v4-periphery/=lib/uniswap-hooks/lib/v4-periphery/","ds-test/=lib/the-compact/lib/permit2/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/uniswap-hooks/lib/v4-core/lib/openzeppelin-contracts/lib/erc4626-tests/","forge-gas-snapshot/=lib/the-compact/lib/permit2/lib/forge-gas-snapshot/src/","forge-std/=lib/forge-std/src/","hardhat/=lib/uniswap-hooks/lib/v4-core/node_modules/hardhat/","hookmate/=lib/hookmate/","openzeppelin-contracts/=lib/the-compact/lib/permit2/lib/openzeppelin-contracts/","openzeppelin/=lib/uniswap-hooks/lib/v4-core/lib/openzeppelin-contracts/contracts/","permit2/=lib/uniswap-hooks/lib/v4-periphery/lib/permit2/","solady/=lib/the-compact/lib/solady/src/","soledge/=lib/the-compact/lib/soledge/src/","solmate/=lib/uniswap-hooks/lib/v4-core/lib/solmate/","the-compact/=lib/the-compact/","uniswap-hooks/=lib/uniswap-hooks/src/","v4-core/=lib/uniswap-hooks/lib/v4-core/","v4-periphery/=lib/uniswap-hooks/lib/v4-periphery/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/uniswap-hooks/lib/v4-periphery/src/interfaces/IMulticall_v4.sol":"IMulticall_v4"},"evmVersion":"cancun","libraries":{}},"sources":{"lib/uniswap-hooks/lib/v4-periphery/src/interfaces/IMulticall_v4.sol":{"keccak256":"0x336bec303f7ff86497d2679464c5adad5040f412b3d0769ce5e1d2a42f7e2c08","urls":["bzz-raw://7734f047d98d331c8abc51ad9f358ceee0a6dcae8d89ac49084b84de0d2d42e7","dweb:/ipfs/QmWij2h7mU36LsXhb9P6pkYXrSCua4ixeWaVFSrsEcEmPQ"],"license":"MIT"}},"version":1},"id":95}