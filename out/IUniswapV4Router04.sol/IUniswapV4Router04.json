{"abi":[{"type":"fallback","stateMutability":"payable"},{"type":"receive","stateMutability":"payable"},{"type":"function","name":"msgSender","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"swap","inputs":[{"name":"amountSpecified","type":"int256","internalType":"int256"},{"name":"amountLimit","type":"uint256","internalType":"uint256"},{"name":"zeroForOne","type":"bool","internalType":"bool"},{"name":"poolKey","type":"tuple","internalType":"struct PoolKey","components":[{"name":"currency0","type":"address","internalType":"Currency"},{"name":"currency1","type":"address","internalType":"Currency"},{"name":"fee","type":"uint24","internalType":"uint24"},{"name":"tickSpacing","type":"int24","internalType":"int24"},{"name":"hooks","type":"address","internalType":"contract IHooks"}]},{"name":"hookData","type":"bytes","internalType":"bytes"},{"name":"receiver","type":"address","internalType":"address"},{"name":"deadline","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"int256","internalType":"BalanceDelta"}],"stateMutability":"payable"},{"type":"function","name":"swap","inputs":[{"name":"data","type":"bytes","internalType":"bytes"},{"name":"deadline","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"int256","internalType":"BalanceDelta"}],"stateMutability":"payable"},{"type":"function","name":"swap","inputs":[{"name":"amountSpecified","type":"int256","internalType":"int256"},{"name":"amountLimit","type":"uint256","internalType":"uint256"},{"name":"startCurrency","type":"address","internalType":"Currency"},{"name":"path","type":"tuple[]","internalType":"struct PathKey[]","components":[{"name":"intermediateCurrency","type":"address","internalType":"Currency"},{"name":"fee","type":"uint24","internalType":"uint24"},{"name":"tickSpacing","type":"int24","internalType":"int24"},{"name":"hooks","type":"address","internalType":"contract IHooks"},{"name":"hookData","type":"bytes","internalType":"bytes"}]},{"name":"receiver","type":"address","internalType":"address"},{"name":"deadline","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"int256","internalType":"BalanceDelta"}],"stateMutability":"payable"},{"type":"function","name":"swapExactTokensForTokens","inputs":[{"name":"amountIn","type":"uint256","internalType":"uint256"},{"name":"amountOutMin","type":"uint256","internalType":"uint256"},{"name":"startCurrency","type":"address","internalType":"Currency"},{"name":"path","type":"tuple[]","internalType":"struct PathKey[]","components":[{"name":"intermediateCurrency","type":"address","internalType":"Currency"},{"name":"fee","type":"uint24","internalType":"uint24"},{"name":"tickSpacing","type":"int24","internalType":"int24"},{"name":"hooks","type":"address","internalType":"contract IHooks"},{"name":"hookData","type":"bytes","internalType":"bytes"}]},{"name":"receiver","type":"address","internalType":"address"},{"name":"deadline","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"int256","internalType":"BalanceDelta"}],"stateMutability":"payable"},{"type":"function","name":"swapExactTokensForTokens","inputs":[{"name":"amountIn","type":"uint256","internalType":"uint256"},{"name":"amountOutMin","type":"uint256","internalType":"uint256"},{"name":"zeroForOne","type":"bool","internalType":"bool"},{"name":"poolKey","type":"tuple","internalType":"struct PoolKey","components":[{"name":"currency0","type":"address","internalType":"Currency"},{"name":"currency1","type":"address","internalType":"Currency"},{"name":"fee","type":"uint24","internalType":"uint24"},{"name":"tickSpacing","type":"int24","internalType":"int24"},{"name":"hooks","type":"address","internalType":"contract IHooks"}]},{"name":"hookData","type":"bytes","internalType":"bytes"},{"name":"receiver","type":"address","internalType":"address"},{"name":"deadline","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"int256","internalType":"BalanceDelta"}],"stateMutability":"payable"},{"type":"function","name":"swapTokensForExactTokens","inputs":[{"name":"amountOut","type":"uint256","internalType":"uint256"},{"name":"amountInMax","type":"uint256","internalType":"uint256"},{"name":"startCurrency","type":"address","internalType":"Currency"},{"name":"path","type":"tuple[]","internalType":"struct PathKey[]","components":[{"name":"intermediateCurrency","type":"address","internalType":"Currency"},{"name":"fee","type":"uint24","internalType":"uint24"},{"name":"tickSpacing","type":"int24","internalType":"int24"},{"name":"hooks","type":"address","internalType":"contract IHooks"},{"name":"hookData","type":"bytes","internalType":"bytes"}]},{"name":"receiver","type":"address","internalType":"address"},{"name":"deadline","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"int256","internalType":"BalanceDelta"}],"stateMutability":"payable"},{"type":"function","name":"swapTokensForExactTokens","inputs":[{"name":"amountOut","type":"uint256","internalType":"uint256"},{"name":"amountInMax","type":"uint256","internalType":"uint256"},{"name":"zeroForOne","type":"bool","internalType":"bool"},{"name":"poolKey","type":"tuple","internalType":"struct PoolKey","components":[{"name":"currency0","type":"address","internalType":"Currency"},{"name":"currency1","type":"address","internalType":"Currency"},{"name":"fee","type":"uint24","internalType":"uint24"},{"name":"tickSpacing","type":"int24","internalType":"int24"},{"name":"hooks","type":"address","internalType":"contract IHooks"}]},{"name":"hookData","type":"bytes","internalType":"bytes"},{"name":"receiver","type":"address","internalType":"address"},{"name":"deadline","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"int256","internalType":"BalanceDelta"}],"stateMutability":"payable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"msgSender()":"d737d0c7","swap(bytes,uint256)":"af2b4aba","swap(int256,uint256,address,(address,uint24,int24,address,bytes)[],address,uint256)":"e729a0be","swap(int256,uint256,bool,(address,address,uint24,int24,address),bytes,address,uint256)":"71d9e3dc","swapExactTokensForTokens(uint256,uint256,address,(address,uint24,int24,address,bytes)[],address,uint256)":"98377a6c","swapExactTokensForTokens(uint256,uint256,bool,(address,address,uint24,int24,address),bytes,address,uint256)":"b1a0d571","swapTokensForExactTokens(uint256,uint256,address,(address,uint24,int24,address,bytes)[],address,uint256)":"1f03952f","swapTokensForExactTokens(uint256,uint256,bool,(address,address,uint24,int24,address),bytes,address,uint256)":"aacdd80f"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"msgSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"amountLimit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contract IHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"struct PoolKey\",\"name\":\"poolKey\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"BalanceDelta\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"BalanceDelta\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"amountLimit\",\"type\":\"uint256\"},{\"internalType\":\"Currency\",\"name\":\"startCurrency\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"intermediateCurrency\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contract IHooks\",\"name\":\"hooks\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"}],\"internalType\":\"struct PathKey[]\",\"name\":\"path\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"BalanceDelta\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"Currency\",\"name\":\"startCurrency\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"intermediateCurrency\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contract IHooks\",\"name\":\"hooks\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"}],\"internalType\":\"struct PathKey[]\",\"name\":\"path\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"BalanceDelta\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contract IHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"struct PoolKey\",\"name\":\"poolKey\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"BalanceDelta\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"Currency\",\"name\":\"startCurrency\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"intermediateCurrency\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contract IHooks\",\"name\":\"hooks\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"}],\"internalType\":\"struct PathKey[]\",\"name\":\"path\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"BalanceDelta\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contract IHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"struct PoolKey\",\"name\":\"poolKey\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"BalanceDelta\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"ABI inspired by UniswapV2Router02\",\"kind\":\"dev\",\"methods\":{\"swap(bytes,uint256)\":{\"details\":\"Minor optimization to reduce the number of onchain abi.encode calls\",\"params\":{\"data\":\"Pre-encoded swap data in one of the following formats:     1. For single-pool swaps: abi.encode(         BaseData baseData,             // struct containing swap parameters         bool zeroForOne,               // direction of swap         PoolKey poolKey,               // key of the pool to swap through         bytes hookData                 // data to pass to hooks     )     2. For multi-pool swaps: abi.encode(         BaseData baseData,             // struct containing swap parameters         Currency startCurrency,        // initial currency in the swap         PathKey[] path                 // array of path keys defining the route     )     PERMIT2 EXTENSION:     1. For single pool swaps: abi.encode(         BaseData baseData,             // struct containing swap parameters         bool zeroForOne,               // direction of swap         PoolKey poolKey,               // key of the pool to swap through         bytes hookData,                // data to pass to hooks         PermitPayload permitPayload    // permit2 signature payload     )     2. For multi-pool swaps: abi.encode(         BaseData baseData,             // struct containing swap parameters         Currency startCurrency,        // initial currency in the swap         PathKey[] path,                // array of path keys defining the route         PermitPayload permitPayload    // permit2 signature payload     )     Where BaseData.flags contains permit2 flag, and PermitPayload contains:         - permit: ISignatureTransfer.PermitTransferFrom         - signature: bytes\",\"deadline\":\"block.timestamp must be before this value, otherwise the transaction will revert\"},\"returns\":{\"_0\":\"Delta the balance changes from the swap\"}},\"swap(int256,uint256,address,(address,uint24,int24,address,bytes)[],address,uint256)\":{\"params\":{\"amountLimit\":\"the minimum amount of output tokens for exact input swaps, the maximum amount of input tokens for exact output swaps\",\"amountSpecified\":\"the amount of tokens to be swapped, negative for exact input swaps and positive for exact output swaps\",\"deadline\":\"block.timestamp must be before this value, otherwise the transaction will revert\",\"path\":\"the path of v4 Pools to swap through\",\"receiver\":\"the address to send the output tokens to\",\"startCurrency\":\"the currency to start the swap from\"},\"returns\":{\"_0\":\"Delta the balance changes from the swap\"}},\"swap(int256,uint256,bool,(address,address,uint24,int24,address),bytes,address,uint256)\":{\"params\":{\"amountLimit\":\"the minimum amount of output tokens for exact input swaps, the maximum amount of input tokens for exact output swaps\",\"amountSpecified\":\"the amount of tokens to be swapped, negative for exact input swaps and positive for exact output swaps\",\"deadline\":\"block.timestamp must be before this value, otherwise the transaction will revert\",\"hookData\":\"the data to be passed to the hook\",\"poolKey\":\"the pool to swap through\",\"receiver\":\"the address to send the output tokens to\",\"zeroForOne\":\"the direction of the swap, true if currency0 is being swapped for currency1\"},\"returns\":{\"_0\":\"Delta the balance changes from the swap\"}},\"swapExactTokensForTokens(uint256,uint256,address,(address,uint24,int24,address,bytes)[],address,uint256)\":{\"params\":{\"amountIn\":\"the amount of input tokens to swap\",\"amountOutMin\":\"the minimum amount of output tokens that must be received for the transaction not to revert. reverts on equals to\",\"deadline\":\"block.timestamp must be before this value, otherwise the transaction will revert\",\"path\":\"the path of v4 Pools to swap through\",\"receiver\":\"the address to send the output tokens to\",\"startCurrency\":\"the currency to start the swap from\"},\"returns\":{\"_0\":\"Delta the balance changes from the swap\"}},\"swapExactTokensForTokens(uint256,uint256,bool,(address,address,uint24,int24,address),bytes,address,uint256)\":{\"params\":{\"amountIn\":\"the amount of input tokens to swap\",\"amountOutMin\":\"the minimum amount of output tokens that must be received for the transaction not to revert\",\"deadline\":\"block.timestamp must be before this value, otherwise the transaction will revert\",\"hookData\":\"the data to be passed to the hook\",\"poolKey\":\"the pool to swap through\",\"receiver\":\"the address to send the output tokens to\",\"zeroForOne\":\"the direction of the swap, true if currency0 is being swapped for currency1\"},\"returns\":{\"_0\":\"Delta the balance changes from the swap\"}},\"swapTokensForExactTokens(uint256,uint256,address,(address,uint24,int24,address,bytes)[],address,uint256)\":{\"params\":{\"amountInMax\":\"the maximum amount of input tokens that can be spent for the transaction not to revert. reverts on equal to\",\"amountOut\":\"the amount of output tokens to receive\",\"deadline\":\"block.timestamp must be before this value, otherwise the transaction will revert\",\"path\":\"the path of v4 Pools to swap through\",\"receiver\":\"the address to send the output tokens to\",\"startCurrency\":\"the currency to start the swap from\"},\"returns\":{\"_0\":\"Delta the balance changes from the swap\"}},\"swapTokensForExactTokens(uint256,uint256,bool,(address,address,uint24,int24,address),bytes,address,uint256)\":{\"params\":{\"amountInMax\":\"the maximum amount of input tokens that can be spent for the transaction not to revert\",\"amountOut\":\"the amount of output tokens to receive\",\"deadline\":\"block.timestamp must be before this value, otherwise the transaction will revert\",\"hookData\":\"the data to be passed to the hook\",\"poolKey\":\"the pool to swap through\",\"receiver\":\"the address to send the output tokens to\",\"zeroForOne\":\"the direction of the swap, true if currency0 is being swapped for currency1\"},\"returns\":{\"_0\":\"Delta the balance changes from the swap\"}}},\"title\":\"Uniswap V4 Swap Router\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"msgSender()\":{\"notice\":\"Public view function to be used instead of msg.sender, as the contract performs self-reentrancy and at times msg.sender == address(this). Instead msgSender() returns the initiator of the lock\"},\"swap(bytes,uint256)\":{\"notice\":\"Generic multi-pool swap function that accepts pre-encoded calldata\"},\"swap(int256,uint256,address,(address,uint24,int24,address,bytes)[],address,uint256)\":{\"notice\":\"General-purpose swap interface for Uniswap v4 that handles all types of swaps\"},\"swap(int256,uint256,bool,(address,address,uint24,int24,address),bytes,address,uint256)\":{\"notice\":\"General-purpose single-pool swap interface\"},\"swapExactTokensForTokens(uint256,uint256,address,(address,uint24,int24,address,bytes)[],address,uint256)\":{\"notice\":\"Exact Input Swap; swap the specified amount of input tokens for as many output tokens as possible, along the path\"},\"swapExactTokensForTokens(uint256,uint256,bool,(address,address,uint24,int24,address),bytes,address,uint256)\":{\"notice\":\"Single pool, exact input swap - swap the specified amount of input tokens for as many output tokens as possible, on a single pool\"},\"swapTokensForExactTokens(uint256,uint256,address,(address,uint24,int24,address,bytes)[],address,uint256)\":{\"notice\":\"Exact Output Swap; swap as few input tokens as possible for the specified amount of output tokens, along the path\"},\"swapTokensForExactTokens(uint256,uint256,bool,(address,address,uint24,int24,address),bytes,address,uint256)\":{\"notice\":\"Singe pool, exact output swap; swap as few input tokens as possible for the specified amount of output tokens, on a single pool\"}},\"notice\":\"A simple, stateless router for execution of swaps against Uniswap v4 Pools\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/hookmate/src/interfaces/router/IUniswapV4Router04.sol\":\"IUniswapV4Router04\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@ensdomains/=lib/uniswap-hooks/lib/v4-core/node_modules/@ensdomains/\",\":@openzeppelin/contracts/=lib/uniswap-hooks/lib/v4-core/lib/openzeppelin-contracts/contracts/\",\":@openzeppelin/uniswap-hooks/=lib/uniswap-hooks/\",\":@uniswap/v4-core/=lib/uniswap-hooks/lib/v4-core/\",\":@uniswap/v4-periphery/=lib/uniswap-hooks/lib/v4-periphery/\",\":ds-test/=lib/the-compact/lib/permit2/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/uniswap-hooks/lib/v4-core/lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/the-compact/lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=lib/uniswap-hooks/lib/v4-core/node_modules/hardhat/\",\":hookmate/=lib/hookmate/\",\":openzeppelin-contracts/=lib/the-compact/lib/permit2/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/uniswap-hooks/lib/v4-core/lib/openzeppelin-contracts/contracts/\",\":permit2/=lib/uniswap-hooks/lib/v4-periphery/lib/permit2/\",\":solady/=lib/the-compact/lib/solady/src/\",\":soledge/=lib/the-compact/lib/soledge/src/\",\":solmate/=lib/uniswap-hooks/lib/v4-core/lib/solmate/\",\":the-compact/=lib/the-compact/\",\":uniswap-hooks/=lib/uniswap-hooks/src/\",\":v4-core/=lib/uniswap-hooks/lib/v4-core/\",\":v4-periphery/=lib/uniswap-hooks/lib/v4-periphery/\"]},\"sources\":{\"lib/hookmate/src/interfaces/router/IUniswapV4Router04.sol\":{\"keccak256\":\"0x6299c57d161a6218f21e8d4dfa3f232380de85e29a8e41d8de95140645fb7d23\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://4838e58e7577ee8a25f77dcdfdd551e2ed9cc9160f24cc62be45346a95d4f2ee\",\"dweb:/ipfs/QmZTbiEhjXm1yG87uy3ENu9E384ZsuE1gqkEb5o85icXcH\"]},\"lib/hookmate/src/interfaces/router/PathKey.sol\":{\"keccak256\":\"0x6985db1127cd0235c84b47b4202f9c19edb5b9af7e6c6d5e1b7e0b86346144f2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2a98109174dd982dbfe0ca465488118d1f61587b31f95e850d5ec62268fd9e08\",\"dweb:/ipfs/QmPa3uPBw2nudtiHHKQmRdM27FZpCSfpxCXD2roTzohgXY\"]},\"lib/uniswap-hooks/lib/v4-core/src/interfaces/IHooks.sol\":{\"keccak256\":\"0xc131ffa2d04c10a012fe715fe2c115811526b7ea34285cf0a04ce7ce8320da8d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3b212358897db5d99c21244d88f97b2e788527552cb430629b472a8cc6289aec\",\"dweb:/ipfs/QmQtwV4dDe2RYk2ErLpaAX7U82jWh1L6Lw2HRuKDvBi84G\"]},\"lib/uniswap-hooks/lib/v4-core/src/interfaces/external/IERC20Minimal.sol\":{\"keccak256\":\"0xeccadf1bf69ba2eb51f2fe4fa511bc7bb05bbd6b9f9a3cb8e5d83d9582613e0f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://118757369892687b99ef46ce28d6861f62c098285bd7687a4f17f7e44e5f81de\",\"dweb:/ipfs/QmUxqbYqQtcEwwFbb9e6BBMePEaSgN8C45v6RKubD4ib8d\"]},\"lib/uniswap-hooks/lib/v4-core/src/libraries/CustomRevert.sol\":{\"keccak256\":\"0x111ed3031b6990c80a93ae35dde6b6ac0b7e6af471388fdd7461e91edda9b7de\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c9ea883c98d6ae1829160d0977bb5195761cfd5bc81692d0a941f45717f594cd\",\"dweb:/ipfs/QmZPwxzaeMNv536wzrAMrMswu7vMHuqPVpjcqL3YvCMoxt\"]},\"lib/uniswap-hooks/lib/v4-core/src/libraries/SafeCast.sol\":{\"keccak256\":\"0x42c4a24f996a14d358be397b71f7ec9d7daf666aaec78002c63315a6ee67aa86\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c3db86e2ba3679105fc32edec656c70282e1fede6cab11217702443f6c26fa59\",\"dweb:/ipfs/QmX4yaaSPdKQzYNRsezjTvZKsubzS8JRTEGFD3fPpTTCcj\"]},\"lib/uniswap-hooks/lib/v4-core/src/types/BalanceDelta.sol\":{\"keccak256\":\"0xa719c8fe51e0a9524280178f19f6851bcc3b3b60e73618f3d60905d35ae5569f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7436928dc9de35c6c7c5c636cb51adaf295cfd590da83b19a004ae33cbec9ef9\",\"dweb:/ipfs/QmRJ9yZkUpzk4433GX3LgVVL8jwpbSYSUwXcucKisf3v4H\"]},\"lib/uniswap-hooks/lib/v4-core/src/types/BeforeSwapDelta.sol\":{\"keccak256\":\"0x2a774312d91285313d569da1a718c909655da5432310417692097a1d4dc83a78\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a2c7a0379955cff9c17ab9e61f95e42909aa5947c22740f86ce940d09856f782\",\"dweb:/ipfs/QmaAuo8UBYXsGrVuKh8iRoAAdqwtg1jDq515cW1ZRP5m9K\"]},\"lib/uniswap-hooks/lib/v4-core/src/types/Currency.sol\":{\"keccak256\":\"0x4a0b84b282577ff6f8acf13ec9f4d32dbb9348748b49611d00e68bee96609c93\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://45f9d62ab3d51b52957279e353853ba1547c3182c9a1e3d1846ada4a90263b01\",\"dweb:/ipfs/QmS8NG84ccQS1yXVD8cv3eKX7J1UKxuJhbUfHTQR2opKF5\"]},\"lib/uniswap-hooks/lib/v4-core/src/types/PoolId.sol\":{\"keccak256\":\"0x308311916ea0f5c2fd878b6a2751eb223d170a69e33f601fae56dfe3c5d392af\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://669c2cd7ac17690b5d8831e0bda72822376c3a04b36afed6d31df4d75fe60918\",\"dweb:/ipfs/QmT6EpkxqU8VF3WsgrZ66F3s1cCQRffR95z1HDYZz7ph6y\"]},\"lib/uniswap-hooks/lib/v4-core/src/types/PoolKey.sol\":{\"keccak256\":\"0xf89856e0580d7a4856d3187a76858377ccee9d59702d230c338d84388221b786\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6f3118fa189025695c37fdf0bdd1190f085ad097484d3c88cf4c56d1db65f639\",\"dweb:/ipfs/QmamXpgtB8GV1CaFLvqefPWSoikLDhMk1yU4heBnVzU8gi\"]},\"lib/uniswap-hooks/lib/v4-core/src/types/PoolOperation.sol\":{\"keccak256\":\"0x7a1a107fc1f2208abb2c9364c8c54e56e98dca27673e9441bed2b949b6382162\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ad2470383bc5595d5af17840c64971f457adac68895a4db41ba5c71a4478e07\",\"dweb:/ipfs/QmdwKhBHDZFuqXrR2BfDBD9r7rB2ULGQBznsajRTkTmL4c\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.30+commit.73712a01"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"payable","type":"fallback"},{"inputs":[],"stateMutability":"view","type":"function","name":"msgSender","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"int256","name":"amountSpecified","type":"int256"},{"internalType":"uint256","name":"amountLimit","type":"uint256"},{"internalType":"bool","name":"zeroForOne","type":"bool"},{"internalType":"struct PoolKey","name":"poolKey","type":"tuple","components":[{"internalType":"Currency","name":"currency0","type":"address"},{"internalType":"Currency","name":"currency1","type":"address"},{"internalType":"uint24","name":"fee","type":"uint24"},{"internalType":"int24","name":"tickSpacing","type":"int24"},{"internalType":"contract IHooks","name":"hooks","type":"address"}]},{"internalType":"bytes","name":"hookData","type":"bytes"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"stateMutability":"payable","type":"function","name":"swap","outputs":[{"internalType":"BalanceDelta","name":"","type":"int256"}]},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"stateMutability":"payable","type":"function","name":"swap","outputs":[{"internalType":"BalanceDelta","name":"","type":"int256"}]},{"inputs":[{"internalType":"int256","name":"amountSpecified","type":"int256"},{"internalType":"uint256","name":"amountLimit","type":"uint256"},{"internalType":"Currency","name":"startCurrency","type":"address"},{"internalType":"struct PathKey[]","name":"path","type":"tuple[]","components":[{"internalType":"Currency","name":"intermediateCurrency","type":"address"},{"internalType":"uint24","name":"fee","type":"uint24"},{"internalType":"int24","name":"tickSpacing","type":"int24"},{"internalType":"contract IHooks","name":"hooks","type":"address"},{"internalType":"bytes","name":"hookData","type":"bytes"}]},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"stateMutability":"payable","type":"function","name":"swap","outputs":[{"internalType":"BalanceDelta","name":"","type":"int256"}]},{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"Currency","name":"startCurrency","type":"address"},{"internalType":"struct PathKey[]","name":"path","type":"tuple[]","components":[{"internalType":"Currency","name":"intermediateCurrency","type":"address"},{"internalType":"uint24","name":"fee","type":"uint24"},{"internalType":"int24","name":"tickSpacing","type":"int24"},{"internalType":"contract IHooks","name":"hooks","type":"address"},{"internalType":"bytes","name":"hookData","type":"bytes"}]},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"stateMutability":"payable","type":"function","name":"swapExactTokensForTokens","outputs":[{"internalType":"BalanceDelta","name":"","type":"int256"}]},{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"bool","name":"zeroForOne","type":"bool"},{"internalType":"struct PoolKey","name":"poolKey","type":"tuple","components":[{"internalType":"Currency","name":"currency0","type":"address"},{"internalType":"Currency","name":"currency1","type":"address"},{"internalType":"uint24","name":"fee","type":"uint24"},{"internalType":"int24","name":"tickSpacing","type":"int24"},{"internalType":"contract IHooks","name":"hooks","type":"address"}]},{"internalType":"bytes","name":"hookData","type":"bytes"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"stateMutability":"payable","type":"function","name":"swapExactTokensForTokens","outputs":[{"internalType":"BalanceDelta","name":"","type":"int256"}]},{"inputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"amountInMax","type":"uint256"},{"internalType":"Currency","name":"startCurrency","type":"address"},{"internalType":"struct PathKey[]","name":"path","type":"tuple[]","components":[{"internalType":"Currency","name":"intermediateCurrency","type":"address"},{"internalType":"uint24","name":"fee","type":"uint24"},{"internalType":"int24","name":"tickSpacing","type":"int24"},{"internalType":"contract IHooks","name":"hooks","type":"address"},{"internalType":"bytes","name":"hookData","type":"bytes"}]},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"stateMutability":"payable","type":"function","name":"swapTokensForExactTokens","outputs":[{"internalType":"BalanceDelta","name":"","type":"int256"}]},{"inputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"amountInMax","type":"uint256"},{"internalType":"bool","name":"zeroForOne","type":"bool"},{"internalType":"struct PoolKey","name":"poolKey","type":"tuple","components":[{"internalType":"Currency","name":"currency0","type":"address"},{"internalType":"Currency","name":"currency1","type":"address"},{"internalType":"uint24","name":"fee","type":"uint24"},{"internalType":"int24","name":"tickSpacing","type":"int24"},{"internalType":"contract IHooks","name":"hooks","type":"address"}]},{"internalType":"bytes","name":"hookData","type":"bytes"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"stateMutability":"payable","type":"function","name":"swapTokensForExactTokens","outputs":[{"internalType":"BalanceDelta","name":"","type":"int256"}]},{"inputs":[],"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"swap(bytes,uint256)":{"details":"Minor optimization to reduce the number of onchain abi.encode calls","params":{"data":"Pre-encoded swap data in one of the following formats:     1. For single-pool swaps: abi.encode(         BaseData baseData,             // struct containing swap parameters         bool zeroForOne,               // direction of swap         PoolKey poolKey,               // key of the pool to swap through         bytes hookData                 // data to pass to hooks     )     2. For multi-pool swaps: abi.encode(         BaseData baseData,             // struct containing swap parameters         Currency startCurrency,        // initial currency in the swap         PathKey[] path                 // array of path keys defining the route     )     PERMIT2 EXTENSION:     1. For single pool swaps: abi.encode(         BaseData baseData,             // struct containing swap parameters         bool zeroForOne,               // direction of swap         PoolKey poolKey,               // key of the pool to swap through         bytes hookData,                // data to pass to hooks         PermitPayload permitPayload    // permit2 signature payload     )     2. For multi-pool swaps: abi.encode(         BaseData baseData,             // struct containing swap parameters         Currency startCurrency,        // initial currency in the swap         PathKey[] path,                // array of path keys defining the route         PermitPayload permitPayload    // permit2 signature payload     )     Where BaseData.flags contains permit2 flag, and PermitPayload contains:         - permit: ISignatureTransfer.PermitTransferFrom         - signature: bytes","deadline":"block.timestamp must be before this value, otherwise the transaction will revert"},"returns":{"_0":"Delta the balance changes from the swap"}},"swap(int256,uint256,address,(address,uint24,int24,address,bytes)[],address,uint256)":{"params":{"amountLimit":"the minimum amount of output tokens for exact input swaps, the maximum amount of input tokens for exact output swaps","amountSpecified":"the amount of tokens to be swapped, negative for exact input swaps and positive for exact output swaps","deadline":"block.timestamp must be before this value, otherwise the transaction will revert","path":"the path of v4 Pools to swap through","receiver":"the address to send the output tokens to","startCurrency":"the currency to start the swap from"},"returns":{"_0":"Delta the balance changes from the swap"}},"swap(int256,uint256,bool,(address,address,uint24,int24,address),bytes,address,uint256)":{"params":{"amountLimit":"the minimum amount of output tokens for exact input swaps, the maximum amount of input tokens for exact output swaps","amountSpecified":"the amount of tokens to be swapped, negative for exact input swaps and positive for exact output swaps","deadline":"block.timestamp must be before this value, otherwise the transaction will revert","hookData":"the data to be passed to the hook","poolKey":"the pool to swap through","receiver":"the address to send the output tokens to","zeroForOne":"the direction of the swap, true if currency0 is being swapped for currency1"},"returns":{"_0":"Delta the balance changes from the swap"}},"swapExactTokensForTokens(uint256,uint256,address,(address,uint24,int24,address,bytes)[],address,uint256)":{"params":{"amountIn":"the amount of input tokens to swap","amountOutMin":"the minimum amount of output tokens that must be received for the transaction not to revert. reverts on equals to","deadline":"block.timestamp must be before this value, otherwise the transaction will revert","path":"the path of v4 Pools to swap through","receiver":"the address to send the output tokens to","startCurrency":"the currency to start the swap from"},"returns":{"_0":"Delta the balance changes from the swap"}},"swapExactTokensForTokens(uint256,uint256,bool,(address,address,uint24,int24,address),bytes,address,uint256)":{"params":{"amountIn":"the amount of input tokens to swap","amountOutMin":"the minimum amount of output tokens that must be received for the transaction not to revert","deadline":"block.timestamp must be before this value, otherwise the transaction will revert","hookData":"the data to be passed to the hook","poolKey":"the pool to swap through","receiver":"the address to send the output tokens to","zeroForOne":"the direction of the swap, true if currency0 is being swapped for currency1"},"returns":{"_0":"Delta the balance changes from the swap"}},"swapTokensForExactTokens(uint256,uint256,address,(address,uint24,int24,address,bytes)[],address,uint256)":{"params":{"amountInMax":"the maximum amount of input tokens that can be spent for the transaction not to revert. reverts on equal to","amountOut":"the amount of output tokens to receive","deadline":"block.timestamp must be before this value, otherwise the transaction will revert","path":"the path of v4 Pools to swap through","receiver":"the address to send the output tokens to","startCurrency":"the currency to start the swap from"},"returns":{"_0":"Delta the balance changes from the swap"}},"swapTokensForExactTokens(uint256,uint256,bool,(address,address,uint24,int24,address),bytes,address,uint256)":{"params":{"amountInMax":"the maximum amount of input tokens that can be spent for the transaction not to revert","amountOut":"the amount of output tokens to receive","deadline":"block.timestamp must be before this value, otherwise the transaction will revert","hookData":"the data to be passed to the hook","poolKey":"the pool to swap through","receiver":"the address to send the output tokens to","zeroForOne":"the direction of the swap, true if currency0 is being swapped for currency1"},"returns":{"_0":"Delta the balance changes from the swap"}}},"version":1},"userdoc":{"kind":"user","methods":{"msgSender()":{"notice":"Public view function to be used instead of msg.sender, as the contract performs self-reentrancy and at times msg.sender == address(this). Instead msgSender() returns the initiator of the lock"},"swap(bytes,uint256)":{"notice":"Generic multi-pool swap function that accepts pre-encoded calldata"},"swap(int256,uint256,address,(address,uint24,int24,address,bytes)[],address,uint256)":{"notice":"General-purpose swap interface for Uniswap v4 that handles all types of swaps"},"swap(int256,uint256,bool,(address,address,uint24,int24,address),bytes,address,uint256)":{"notice":"General-purpose single-pool swap interface"},"swapExactTokensForTokens(uint256,uint256,address,(address,uint24,int24,address,bytes)[],address,uint256)":{"notice":"Exact Input Swap; swap the specified amount of input tokens for as many output tokens as possible, along the path"},"swapExactTokensForTokens(uint256,uint256,bool,(address,address,uint24,int24,address),bytes,address,uint256)":{"notice":"Single pool, exact input swap - swap the specified amount of input tokens for as many output tokens as possible, on a single pool"},"swapTokensForExactTokens(uint256,uint256,address,(address,uint24,int24,address,bytes)[],address,uint256)":{"notice":"Exact Output Swap; swap as few input tokens as possible for the specified amount of output tokens, along the path"},"swapTokensForExactTokens(uint256,uint256,bool,(address,address,uint24,int24,address),bytes,address,uint256)":{"notice":"Singe pool, exact output swap; swap as few input tokens as possible for the specified amount of output tokens, on a single pool"}},"version":1}},"settings":{"remappings":["@ensdomains/=lib/uniswap-hooks/lib/v4-core/node_modules/@ensdomains/","@openzeppelin/contracts/=lib/uniswap-hooks/lib/v4-core/lib/openzeppelin-contracts/contracts/","@openzeppelin/uniswap-hooks/=lib/uniswap-hooks/","@uniswap/v4-core/=lib/uniswap-hooks/lib/v4-core/","@uniswap/v4-periphery/=lib/uniswap-hooks/lib/v4-periphery/","ds-test/=lib/the-compact/lib/permit2/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/uniswap-hooks/lib/v4-core/lib/openzeppelin-contracts/lib/erc4626-tests/","forge-gas-snapshot/=lib/the-compact/lib/permit2/lib/forge-gas-snapshot/src/","forge-std/=lib/forge-std/src/","hardhat/=lib/uniswap-hooks/lib/v4-core/node_modules/hardhat/","hookmate/=lib/hookmate/","openzeppelin-contracts/=lib/the-compact/lib/permit2/lib/openzeppelin-contracts/","openzeppelin/=lib/uniswap-hooks/lib/v4-core/lib/openzeppelin-contracts/contracts/","permit2/=lib/uniswap-hooks/lib/v4-periphery/lib/permit2/","solady/=lib/the-compact/lib/solady/src/","soledge/=lib/the-compact/lib/soledge/src/","solmate/=lib/uniswap-hooks/lib/v4-core/lib/solmate/","the-compact/=lib/the-compact/","uniswap-hooks/=lib/uniswap-hooks/src/","v4-core/=lib/uniswap-hooks/lib/v4-core/","v4-periphery/=lib/uniswap-hooks/lib/v4-periphery/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/hookmate/src/interfaces/router/IUniswapV4Router04.sol":"IUniswapV4Router04"},"evmVersion":"cancun","libraries":{}},"sources":{"lib/hookmate/src/interfaces/router/IUniswapV4Router04.sol":{"keccak256":"0x6299c57d161a6218f21e8d4dfa3f232380de85e29a8e41d8de95140645fb7d23","urls":["bzz-raw://4838e58e7577ee8a25f77dcdfdd551e2ed9cc9160f24cc62be45346a95d4f2ee","dweb:/ipfs/QmZTbiEhjXm1yG87uy3ENu9E384ZsuE1gqkEb5o85icXcH"],"license":"UNLICENSED"},"lib/hookmate/src/interfaces/router/PathKey.sol":{"keccak256":"0x6985db1127cd0235c84b47b4202f9c19edb5b9af7e6c6d5e1b7e0b86346144f2","urls":["bzz-raw://2a98109174dd982dbfe0ca465488118d1f61587b31f95e850d5ec62268fd9e08","dweb:/ipfs/QmPa3uPBw2nudtiHHKQmRdM27FZpCSfpxCXD2roTzohgXY"],"license":"MIT"},"lib/uniswap-hooks/lib/v4-core/src/interfaces/IHooks.sol":{"keccak256":"0xc131ffa2d04c10a012fe715fe2c115811526b7ea34285cf0a04ce7ce8320da8d","urls":["bzz-raw://3b212358897db5d99c21244d88f97b2e788527552cb430629b472a8cc6289aec","dweb:/ipfs/QmQtwV4dDe2RYk2ErLpaAX7U82jWh1L6Lw2HRuKDvBi84G"],"license":"MIT"},"lib/uniswap-hooks/lib/v4-core/src/interfaces/external/IERC20Minimal.sol":{"keccak256":"0xeccadf1bf69ba2eb51f2fe4fa511bc7bb05bbd6b9f9a3cb8e5d83d9582613e0f","urls":["bzz-raw://118757369892687b99ef46ce28d6861f62c098285bd7687a4f17f7e44e5f81de","dweb:/ipfs/QmUxqbYqQtcEwwFbb9e6BBMePEaSgN8C45v6RKubD4ib8d"],"license":"MIT"},"lib/uniswap-hooks/lib/v4-core/src/libraries/CustomRevert.sol":{"keccak256":"0x111ed3031b6990c80a93ae35dde6b6ac0b7e6af471388fdd7461e91edda9b7de","urls":["bzz-raw://c9ea883c98d6ae1829160d0977bb5195761cfd5bc81692d0a941f45717f594cd","dweb:/ipfs/QmZPwxzaeMNv536wzrAMrMswu7vMHuqPVpjcqL3YvCMoxt"],"license":"MIT"},"lib/uniswap-hooks/lib/v4-core/src/libraries/SafeCast.sol":{"keccak256":"0x42c4a24f996a14d358be397b71f7ec9d7daf666aaec78002c63315a6ee67aa86","urls":["bzz-raw://c3db86e2ba3679105fc32edec656c70282e1fede6cab11217702443f6c26fa59","dweb:/ipfs/QmX4yaaSPdKQzYNRsezjTvZKsubzS8JRTEGFD3fPpTTCcj"],"license":"MIT"},"lib/uniswap-hooks/lib/v4-core/src/types/BalanceDelta.sol":{"keccak256":"0xa719c8fe51e0a9524280178f19f6851bcc3b3b60e73618f3d60905d35ae5569f","urls":["bzz-raw://7436928dc9de35c6c7c5c636cb51adaf295cfd590da83b19a004ae33cbec9ef9","dweb:/ipfs/QmRJ9yZkUpzk4433GX3LgVVL8jwpbSYSUwXcucKisf3v4H"],"license":"MIT"},"lib/uniswap-hooks/lib/v4-core/src/types/BeforeSwapDelta.sol":{"keccak256":"0x2a774312d91285313d569da1a718c909655da5432310417692097a1d4dc83a78","urls":["bzz-raw://a2c7a0379955cff9c17ab9e61f95e42909aa5947c22740f86ce940d09856f782","dweb:/ipfs/QmaAuo8UBYXsGrVuKh8iRoAAdqwtg1jDq515cW1ZRP5m9K"],"license":"MIT"},"lib/uniswap-hooks/lib/v4-core/src/types/Currency.sol":{"keccak256":"0x4a0b84b282577ff6f8acf13ec9f4d32dbb9348748b49611d00e68bee96609c93","urls":["bzz-raw://45f9d62ab3d51b52957279e353853ba1547c3182c9a1e3d1846ada4a90263b01","dweb:/ipfs/QmS8NG84ccQS1yXVD8cv3eKX7J1UKxuJhbUfHTQR2opKF5"],"license":"MIT"},"lib/uniswap-hooks/lib/v4-core/src/types/PoolId.sol":{"keccak256":"0x308311916ea0f5c2fd878b6a2751eb223d170a69e33f601fae56dfe3c5d392af","urls":["bzz-raw://669c2cd7ac17690b5d8831e0bda72822376c3a04b36afed6d31df4d75fe60918","dweb:/ipfs/QmT6EpkxqU8VF3WsgrZ66F3s1cCQRffR95z1HDYZz7ph6y"],"license":"MIT"},"lib/uniswap-hooks/lib/v4-core/src/types/PoolKey.sol":{"keccak256":"0xf89856e0580d7a4856d3187a76858377ccee9d59702d230c338d84388221b786","urls":["bzz-raw://6f3118fa189025695c37fdf0bdd1190f085ad097484d3c88cf4c56d1db65f639","dweb:/ipfs/QmamXpgtB8GV1CaFLvqefPWSoikLDhMk1yU4heBnVzU8gi"],"license":"MIT"},"lib/uniswap-hooks/lib/v4-core/src/types/PoolOperation.sol":{"keccak256":"0x7a1a107fc1f2208abb2c9364c8c54e56e98dca27673e9441bed2b949b6382162","urls":["bzz-raw://4ad2470383bc5595d5af17840c64971f457adac68895a4db41ba5c71a4478e07","dweb:/ipfs/QmdwKhBHDZFuqXrR2BfDBD9r7rB2ULGQBznsajRTkTmL4c"],"license":"MIT"}},"version":1},"id":27}